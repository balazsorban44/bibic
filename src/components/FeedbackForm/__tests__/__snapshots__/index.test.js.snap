// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FeedbackDone component renders correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <FeedbackDone />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": undefined,
      "className": "feedback-done",
    },
    "ref": null,
    "rendered": null,
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": undefined,
        "className": "feedback-done",
      },
      "ref": null,
      "rendered": null,
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`RatingSlider component renders correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <RatingSlider />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h3 />,
        <ul>
          <RatingValue
            isActive={false}
            value={1}
          />
          <RatingValue
            isActive={false}
            value={2}
          />
          <RatingValue
            isActive={false}
            value={3}
          />
          <RatingValue
            isActive={false}
            value={4}
          />
          <RatingValue
            isActive={false}
            value={5}
          />
        </ul>,
      ],
      "className": "feedback-rating-slider",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": undefined,
        },
        "ref": null,
        "rendered": null,
        "type": "h3",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <RatingValue
              isActive={false}
              value={1}
            />,
            <RatingValue
              isActive={false}
              value={2}
            />,
            <RatingValue
              isActive={false}
              value={3}
            />,
            <RatingValue
              isActive={false}
              value={4}
            />,
            <RatingValue
              isActive={false}
              value={5}
            />,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": "0",
            "nodeType": "function",
            "props": Object {
              "isActive": false,
              "name": undefined,
              "onChange": undefined,
              "value": 1,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": "1",
            "nodeType": "function",
            "props": Object {
              "isActive": false,
              "name": undefined,
              "onChange": undefined,
              "value": 2,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": "2",
            "nodeType": "function",
            "props": Object {
              "isActive": false,
              "name": undefined,
              "onChange": undefined,
              "value": 3,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": "3",
            "nodeType": "function",
            "props": Object {
              "isActive": false,
              "name": undefined,
              "onChange": undefined,
              "value": 4,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": "4",
            "nodeType": "function",
            "props": Object {
              "isActive": false,
              "name": undefined,
              "onChange": undefined,
              "value": 5,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "ul",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h3 />,
          <ul>
            <RatingValue
              isActive={false}
              value={1}
            />
            <RatingValue
              isActive={false}
              value={2}
            />
            <RatingValue
              isActive={false}
              value={3}
            />
            <RatingValue
              isActive={false}
              value={4}
            />
            <RatingValue
              isActive={false}
              value={5}
            />
          </ul>,
        ],
        "className": "feedback-rating-slider",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": undefined,
          },
          "ref": null,
          "rendered": null,
          "type": "h3",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <RatingValue
                isActive={false}
                value={1}
              />,
              <RatingValue
                isActive={false}
                value={2}
              />,
              <RatingValue
                isActive={false}
                value={3}
              />,
              <RatingValue
                isActive={false}
                value={4}
              />,
              <RatingValue
                isActive={false}
                value={5}
              />,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": "0",
              "nodeType": "function",
              "props": Object {
                "isActive": false,
                "name": undefined,
                "onChange": undefined,
                "value": 1,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": "1",
              "nodeType": "function",
              "props": Object {
                "isActive": false,
                "name": undefined,
                "onChange": undefined,
                "value": 2,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": "2",
              "nodeType": "function",
              "props": Object {
                "isActive": false,
                "name": undefined,
                "onChange": undefined,
                "value": 3,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": "3",
              "nodeType": "function",
              "props": Object {
                "isActive": false,
                "name": undefined,
                "onChange": undefined,
                "value": 4,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": "4",
              "nodeType": "function",
              "props": Object {
                "isActive": false,
                "name": undefined,
                "onChange": undefined,
                "value": 5,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "ul",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
