// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RoomMenu component renders correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <RoomMenu
    isBigScreen={true}
    onClick={[MockFunction]}
    rooms={
      Array [
        Object {
          "id": 1,
        },
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": "1",
    "nodeType": "host",
    "props": Object {
      "children": <Link
        offset={-106}
        onClick={[MockFunction]}
        to="szoba-1"
      >
        1
      </Link>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": 1,
        "offset": -106,
        "onClick": [MockFunction],
        "to": "szoba-1",
      },
      "ref": null,
      "rendered": 1,
      "type": [Function],
    },
    "type": "li",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": "1",
      "nodeType": "host",
      "props": Object {
        "children": <Link
          offset={-106}
          onClick={[MockFunction]}
          to="szoba-1"
        >
          1
        </Link>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": 1,
          "offset": -106,
          "onClick": [MockFunction],
          "to": "szoba-1",
        },
        "ref": null,
        "rendered": 1,
        "type": [Function],
      },
      "type": "li",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
